<?php
//TODO: properly process $prefs and $mappings
final class userManager {
	public function __construct() {
		global $agave;
		$this->agave = $agave;
	}
	public function __destruct() {}
	
	public function returnUsersByMapping($mappings=NULL, $sort=NULL, $sortType=NULL, $basic=NULL) {
		//assemble joins
		$join = array();
		if(isset($mappings)) $join[] = "INNER JOIN  `users_map` um ON u.`userKey` = um.`userKey`";
		$join = implode(" ", $join);

		//assemble where clauses for mappings
		$where = array();
		if(isset($mappings)) {
			$mappingsWhere = array();
			foreach($mappings as $mapping=>$value) {
				$value = (is_array($value)) ? implode("','", $value) : $value;
				$mappingsWhere[] = "WHERE um.`$mapping` IN('".$value."')";
			}
			$where[] = implode(" AND ", $mappingsWhere);
		}		
		
		//compress where clauses
		$where = implode(" AND ", $where);
		
		//assemble sort clause: TODO allow for multiple parameters
		$sort = ($sort) ? "ORDER BY $sort $sortType": NULL;
		
		$query = "SELECT u.*, um.* FROM `users` u $join $where $sort ";
		$results = $this->agave->doSQLQuery($query, 3);
		
		//build user objects on results - TODO: Should we build the objects here?
		$keys = array();
		for($i=0; $i<count($results); $i++) $keys[$i] = $results[$i]['userKey'];
		$keys = array_unique($keys);
		
		$users = array();
		for($i=0; $i<count($keys); $i++) {
			$users[$i] = new user;
			if($basic) $users[$i]->buildBasic($keys[$i]);
			else $users[$i]->build($keys[$i]);
		}
		
		return (!empty($users)) ? $users : NULL;
	}

	public function returnUsers($keys) {
		$users = array();
		foreach($keys as $key) {
			$user = new user;
			$user->build($key);
			$users[] = $user;
		}
		return (!empty($users)) ? $users : FALSE;
	}

	public function addUserType($name, $label, $desc) {

		$query = "SELECT `name` FROM `agave_users_types`";
		$current = $this->agave->doSQLQuery($query, 1);
                if(!$current) $current = array(); // attempting fix
		if(in_array($name, $current)) {
			$this->agave->message('error', "A user type with that name already exists in the database.");
			$this->agave->redirect("admin/users&mode=types");
		}

		$name = $this->agave->escape($name);
		$label = $this->agave->escape($label);
		$desc = $this->agave->escape($desc);

		//add new user_type to user_types
		$query = "INSERT INTO `agave_users_types` (`name`, `label`, `desc`) VALUES('".$name."','".$label."','".$desc."')";
		$this->agave->doSQLQuery($query);

		//add default mappings for all access properties for new user level
		$query = "SELECT `action`, `default` FROM `agave_users_access`";
		$actions = $this->agave->doSQLQuery($query, 3);
		if($actions) {
			foreach($actions as $item) {
				$query = "INSERT INTO `agave_users_access_map` (action, user_type, value) VALUES('".$item['action']."','".$name."','".$item['default']."')";
				$this->agave->doSQLQuery($query);
			}
		}

		$this->agave->load('schemaManager')->addSchema('agave_users', $name, $label, $desc);
	}

	public function deleteUserType($name) {
		$query = "DELETE FROM `agave_users_access_map` WHERE `user_type`='$name'";
		$this->agave->doSQLQuery($query);

		$query = "DELETE FROM `agave_users_map` WHERE `user_type`='$name'";
		$this->agave->doSQLQuery($query);

		$query = "DELETE FROM `agave_users_types` WHERE `name`='$name'";
		$this->agave->doSQLQuery($query);

		$this->agave->load('schemaManager')->deleteSchema('agave_users', $name);
	}

}
