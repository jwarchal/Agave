<?php
class schema {
	private $fieldKeys = FALSE; //all fieldKeys for this schema
	private $fields = FALSE; //all field data from schema_fields table
	private $fieldList = FALSE; //fields ordered by weight
	private $fieldElements = FALSE; //array of fieldElements for fieldManager
	private $values = FALSE; //may be flat array, may be multilayered if matchFields

	public function __construct($stem, $schema, $uniqueKey=FALSE, $matchFields=FALSE) {
		global $agave;
		$this->agave = $agave;
		$this->stem = $stem;
		$this->schema = $schema;
		$this->uniqueKey = $uniqueKey;
		$this->matchFields = $matchFields;

		$this->populate();
	}
	
	//public API methods
	public function returnFieldElements($matchFields=FALSE) {
		//if matchkeys were received, set default field values based on matchkeys
		//return ordered by weight
	}

	public function returnFieldElement($field, $matchFields=FALSE) {
		//return given field, prefilled with specific matchKey if given
	}

	public function displayFields($field, $matchKeys=FALSE) {
		//foreach in fieldList, displayField(list['field'], $matchKeys);
	}
	public function displayField($field, $matchKeys=FALSE) {
		//check user access if present
	}

	public function getValue($field, $matchFields=FALSE) {}

	//private utility methods
	private function populate() {
		//matchKeys will RESTRICT to only the given; if no present, all values are loaded into values array based on available matchkeys

		//the following must be called in this order
		$this->getFieldKeys();
		$this->organizeFields();
		$this->organizeFieldList();
		$this->organizeFieldElements();
		$this->organizeValues();
	}

	private function getFieldKeys() {}
	private function organizeFields() {}
	private function organizeFieldList() {}
	private function organizeFieldElements() {}
	private function organizeValues() {}

	private function unpackFieldElement($row) {

	}
}