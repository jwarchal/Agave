<?php
class schema {
	private $fieldKeys = FALSE; //all fieldKeys for this schema
	private $fields = FALSE; //all field data from schema_fields table
	public $fieldOrderedList = FALSE; //fields ordered by weight
	private $fieldElements = FALSE; //array of fieldElements for fieldManager
	private $values = FALSE; //may be flat array, may be multilayered if matchFields
	private $fieldTypes = FALSE; //flat array of fieldKeys and their field type (checkbox, textarea, etc... used for formatting/unformatting values)

	public function __construct($stem, $schema, $uniqueKey=FALSE, $matchFields=FALSE) {
		global $agave;
		$this->agave = $agave;
		$this->stem = $stem;
		$this->schema = $schema;
		$this->uniqueKey = $uniqueKey;
		$this->matchFields = $matchFields;

		//matchKeys will RESTRICT to only the given; if none present, all values are loaded into values array based on available matchkeys
		$this->populate();
	}
	
	/*
	 * PUBLIC API METHODS
	 */
	public function returnFormElements($parentElement=FALSE, $matchFields=FALSE) {
		//if matchkeys were received, set default field values based on matchkeys
		if(!$this->fields) return;
		$elements = array();
		foreach($this->fieldOrderedList as $field) $elements[$field] = $this->returnFormElement($field, $parentElement, $matchFields);
		return $elements;
	}

	//TODO; remove parentElement stuff, it's probably unnecessary
	public function returnFormElement($fieldName, $parentElement=FALSE, $matchFields=FALSE) {
		$element = $this->fieldElements[$fieldName];
		if(!$matchFields) $matchFields = $this->matchFields; //inherit matchfields from constructor if none explicit
		if($matchFields) $element['#metadata']['matchFields'] = $matchFields;

		if($this->uniqueKey) {
			$valRow = $this->getValueRow($fieldName, $matchFields);
			$element['#default'] = $valRow['value'];
			$element['#metadata']['valueKey'] = $valRow['valueKey'];
		}

		return $element;
	}

	public function displayFields($matchFields=FALSE) {
		if($this->fields) {
			$html = NULL;
			foreach($this->fieldOrderedList as $field) $html .= $this->displayField($field, $matchFields);
			return $html;
		}
		return NULL;
	}
	
	public function displayField($field, $matchFields=FALSE) {
		$value = $this->getValue($field, $matchFields);
		return ($value) ? $this->agave->load('fieldManager')->displayFormat($value, $this->fields[$field]) : NULL;
	}

	public function getValue($field, $matchFields = FALSE) {
		$row = $this->getValueRow($field, $matchFields);
		return $row['value'];
	}

	/*
	 * PRIVATE UTILITY METHODS
	 */
	private function populate() {
		//the following must be called in this order
		$this->getFields();
		$this->organizeValues();
	}

	private function getFields() {
		$query = "SELECT * FROM `".$this->stem."_schema_fields` WHERE `schema`='".$this->schema."' ";
		$fieldData = $this->agave->doSQLQuery($query, 3);
		if(!$fieldData) return FALSE;

		$fieldKeys = array();
		$fields = array();
		$fieldOrderedList = array();
		$elements = array();
		$fieldTypes = array();

		//set fieldKeys, fields and fieldList
		foreach($fieldData as $field) {
			$field['settings'] = unserialize($field['settings']);
			$fieldOrderedList[(50000+$field['weight'])."_".$field['keyName']."_".$field['fieldKey']] = $field['keyName'];
			$fields[$field['keyName']] = $field;
			$fieldKeys[] = $field['fieldKey'];
			$elements[$field['keyName']] = $this->unpackElement($field);
			$fieldTypes[$field['fieldKey']] = $field['type'];
		}
		ksort($fieldOrderedList);

		$this->fields = $fields;
		$this->fieldKeys = $fieldKeys;
		$this->fieldOrderedList = $fieldOrderedList;
		$this->fieldElements = $elements;
		$this->fieldTypes = $fieldTypes;
	}

	private function getValueRow($field, $matchFields=FALSE) {
		if(!$matchFields) $matchFields = $this->matchFields; //this takes into account the fact that matchFields could have been set in the constructor
		if(!$this->values) return FALSE;
		foreach($this->values[$this->fields[$field]['fieldKey']] as $row) {
			if(!$matchFields && !$row['matchFields']) return $row;
			else if($matchFields) {
				if($matchFields == $row['matchFields']) return $row;
			}
		}
	}

	private function unpackElement($field) {
		$element = array(
			'#name'=>$field['keyName'],
			'#type'=>$field['type'],
			'#label'=>$field['label'],
			'#help'=>$field['help'],
			'#access'=>$field['access'],
			'#weight'=>$field['weight'],
			'#metadata'=>array(
				'stem'=>$this->stem,
				'schema'=>$this->schema,
				'uniqueKey'=>$this->uniqueKey,
				'fieldKey'=>$field['fieldKey'],
			),
		);

		//if the schema was built with matchField restrictions, but them in the metadata even if there are no values, they'll be used on save
		if($this->matchFields) $element['#metadata']['matchFields'] = $this->matchFields;

		//unpack field settings
		if(!empty($settings)) foreach($settings as $key=>$value) $element[$field['keyName']]["#".$key] = $value;

		return $element;
	}

	private function organizeValues() {
		if(!$this->uniqueKey || !$this->fieldKeys) return FALSE;
		$query = "SELECT * FROM `".$this->stem."_schema_values` WHERE `uniqueKey`='".$this->uniqueKey."'";
		$valueData = $this->agave->doSQLQuery($query, 3);

		//This part is a little tricky, we create a big array of all the values, keyed by their fieldKey.
		//Each entry could have multiple value rows, depending on the presence of matchKeys
		//each row for each fieldKey contains the value, valueKey and matchFields if they were present,
		//note that matchField columns must begin with "mf_" in the database to be seen

		$values = array();

		if($valueData) {
			foreach($valueData as $row) {
				$matchFields = array();

				//this search for possible matchfields could be optimized more?  .... probably?
				foreach($row as $key=>$value) if(substr($key, 0, 3) == 'mf_') $matchFields[substr($key, 3, strlen($key)-3)] = $value;

				$values[$row['fieldKey']][] = array(
					'value'=>$this->agave->load('fieldManager')->schemaUnformat($this->fieldTypes[$row['fieldKey']], $row['value']),
					'matchFields' => (!empty($matchFields)) ? $matchFields : FALSE,
					'valueKey'=>$row['valueKey'],
					'fieldKey'=>$row['fieldKey'],
				);
			}
		}

		$this->values = (!empty($values)) ? $values : FALSE;
	}
}