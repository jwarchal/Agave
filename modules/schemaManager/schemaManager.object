<?php
class schemaManager {
	private $debugFilter = NULL; //can be an array of method names

	public function __construct() {
        global $agave;
        $this->agave = $agave;
    }

    public function createSchemaTables($stem) {
        $query = "CREATE TABLE IF NOT EXISTS `".$stem."_schemata` (
          `schemaKey` int(11) NOT NULL auto_increment,
          `schema` varchar(60) character set utf8 collate utf8_unicode_ci NOT NULL,
          `label` varchar(255) character set utf8 collate utf8_unicode_ci NOT NULL,
          `desc` text character set utf8 collate utf8_unicode_ci NOT NULL,
          PRIMARY KEY  (`schemaKey`)
        ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;";
        $this->agave->doSQLQuery($query, 0);

		$query = "CREATE TABLE IF NOT EXISTS `".$stem."_schema_fields` (
          `fieldKey` int(11) NOT NULL auto_increment,
          `schema` varchar(255) collate utf8_unicode_ci NOT NULL,
          `keyName` varchar(60) collate utf8_unicode_ci NOT NULL,
          `type` varchar(60) collate utf8_unicode_ci default NULL,
          `label` varchar(255) collate utf8_unicode_ci default NULL,
          `help` varchar(2000) collate utf8_unicode_ci default NULL,
          `showLabel` tinyint(1) NOT NULL default '1',
          `weight` int(4) default NULL,
          `access` varchar(60) collate utf8_unicode_ci default NULL,
          `settings` text collate utf8_unicode_ci NOT NULL,
          `locked` tinyint(1) NOT NULL default '0',
          PRIMARY KEY  (`fieldKey`)
        ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;";
        $this->agave->doSQLQuery($query, 0);

        $query = "CREATE TABLE IF NOT EXISTS `".$stem."_schema_values` (
          `valueKey` int(11) NOT NULL auto_increment,
          `fieldKey` int(20) NOT NULL,
          `uniqueKey` int(11) NOT NULL,
          `value` text NOT NULL,
          PRIMARY KEY  (`valueKey`)
        ) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1 ;";
        $this->agave->doSQLQuery($query, 0);
    }

    public function deleteSchemaTables($stem) {
		$query = "DROP TABLE `".$stem."_schemata`";
		$this->agave->doSQLQuery($query, 0);
		$query = "DROP TABLE `".$stem."_schema_fields`";
		$this->agave->doSQLQuery($query, 0);
		$query = "DROP TABLE `".$stem."_schema_values`";
		$this->agave->doSQLQuery($query, 0);
    }

    public function addSchema($stem, $schema, $label, $desc) {
        $query = "INSERT INTO `".$stem."_schemata` (`schema`,`label`,`desc`) VALUES('".$schema."', '".$label."', '".$desc."')";
        $this->agave->doSQLQuery($query, 0);
    }

    public function deleteSchema($stem, $schema) {
        $query = "SELECT `fieldKey` FROM `".$stem."_schema_fields` WHERE `schema`='".$schema."'";
        $fieldKeys = $this->agave->doSQLQuery($query, 1);

        if(!empty($fieldKeys)) {
            $query = "DELETE FROM `".$stem."_schema_values` WHERE `fieldKey` IN('".implode("','", $fieldKeys)."')";
            $this->agave->doSQLQuery($query, 0);
        }

		$query = "DELETE FROM `".$stem."_schema_fields` WHERE `schema`='".$schema."'";
		$this->agave->doSQLQuery($query, 0);
		$query = "DELETE FROM `".$stem."_schemata` WHERE `schema`='".$schema."'";
		$this->agave->doSQLQuery($query, 0);
    }

    public function addSchemaField($stem, $data) {
		return $this->agave->mergeRow($stem."_schema_fields", $data);
    }

    public function deleteSchemaField($stem, $fieldKey) {
		$locked = $this->getFieldData($stem, $fieldKey, 'locked');
		if(!$locked) {
			$query = "DELETE FROM `".$stem."_schema_values` WHERE `fieldKey`='$fieldKey'";
			$this->agave->doSQLQuery($query, 0);
			$query = "DELETE FROM `".$stem."_schema_fields` WHERE `fieldKey`='$fieldKey'";
			$this->agave->doSQLQuery($query, 0);
		}
		else $this->agave->message('warning', "SchemaManager tried to delete a locked field from a schema in <b>$stem</b>");
    }

    public function addValueMatchField($stem, $column, $settings=NULL) {
		//set sql type, defaults to int
		$type = (isset($settings['type'])) ? strtoupper($settings['type']) : 'INT';

		//set sql length, defaults to 11 for ints or 32 for varchar
		if(!isset($settings['length'])) $length = ($settings['type']=='VARCHAR') ? '32' : '11';
		else $length = $settings['length'];

		//column name
		$column = "mf_".$column;

		//build query to modify table
		$query = "ALTER TABLE `".$stem."_schema_values` ADD `$column` $type( $length ) NULL AFTER `uniqueKey`";
		$this->agave->doSQLQuery($query, 0);
    }

    public function deleteValueMatchField($stem, $column) {
		$query = "DELETE FROM `".$stem."_schema_values` WHERE `mf_".$column."` != NULL";
		$this->agave->dOSQLQuery($query, 0);
        $query = "ALTER TABLE `".$stem."_schema_values` DROP `mf_".$column."` ";
        $this->agave->doSQLQuery($query);
    }

	public function saveSchemaFormValues($uniqueKey, $form, $unset=FALSE) {
		$schemaFields = array();

		//check for metadata denoting schema field, if it's there, build the query and save the field data
		foreach($form->fields as $field) if(isset($field["#metadata"]['schema'])) {
			$data = array();
			$stem = $field['#metadata']['stem'];
			$meta = (!empty($field['#metadata'])) ? $field['#metadata'] : FALSE;
			$data['uniqueKey'] = $uniqueKey;
			$data['valueKey'] = (isset($field['#metadata']['valueKey'])) ? $field['#metadata']['valueKey'] : NULL;
			$data['value'] = $this->agave->load('fieldManager')->schemaFormat($form->values[$field["#name"]], $field['#type'], $meta);
			$data['fieldKey'] = $field['#metadata']['fieldKey'];
			if(!empty($field['#metadata']['matchFields'])) {
				foreach($field['#metadata']['matchFields'] as $key=>$value) {
					$data['mf_'.$key] = $value;
				}
			}
			if($unset) unset($form->values[$field['#name']]);
			$this->agave->mergeRow($stem."_schema_values", $data);
		}
	}

	public function searchSchema($stem, $schema, $field, $value) {
		//get data for requested field
		$query = "SELECT `fieldKey`,`type` FROM `".$stem."_schema_fields` WHERE `keyName`='$field' AND `schema`='$schema'";
		$fieldData = $this->agave->doSQLQuery($query, 2);
		if(!$fieldData) return FALSE;

		$fm = $this->agave->load('fieldManager');

		$query = ""; //TODO: finish writing this search thingy...

		//load fieldManager to format search string based on type of field
		//search all rows where fieldKey=fieldKey and value=$fm->schemaFormat($type, $value)
		//return array of unique keys that match the field=>value
	}

	public function getFieldData($stem, $fieldKey, $field) {
		$query = "SELECT `$field` from `".$stem."_schema_fields` WHERE `fieldKey`='$fieldKey'";
		return $this->agave->doSQLQuery($query, 0);
	}

	public function availableSchemata($stem) {
		$query = "SELECT `schema` FROM `".$stem."_schemata`";
		return $this->agave->doSQLQuery($query, 1);
	}
	
} //end of class