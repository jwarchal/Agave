<?php

final class admin {
	public function __construct() {
		global $agave;
		$this->agave = $agave;
	}

/**
 * Module status methods
 */

	public function setModuleEnabled($module) {
		$enabled = $this->agave->setting('enabled_modules');
		$enabled[] = $module;
		$this->saveSetting('enabled_modules', $enabled);
	}

	public function setModuleDisabled($module) {
		$enabled = $this->agave->setting('enabled_modules');
		$key = array_search($module, $enabled);
		unset($enabled[$key]);
		$this->saveSetting('enabled_modules', $enabled);
	}

	public function setModuleInstalled($module) {
		$installed = $this->agave->setting('installed_modules');
		$installed[] = $module;
		$this->saveSetting('installed_modules', $installed);
	}

	public function setModuleUninstalled($module) {
		$installed = $this->agave->setting('installed_modules');
		$key = array_search($module, $installed);
		unset($installed[$key]);
		$this->saveSetting('installed_modules', $installed);
	}


	public function setModuleVersion($module, $version) {
		$versions = $this->agave->setting('module_versions');
		$versions[$module] = $version;
		$this->saveSetting('module_versions', $versions);
	}

	public function installModule($module) {
		include_once($this->agave->modulePath($module).$module.".info");
		$meta = call_user_func($module."_info_meta");
		
		//run install hook first
		if(function_exists($module."_info_install")) call_user_func($module."_info_install");
		
		//now run upates to core tables
		if(function_exists($module."_info_cron")) $this->installCron(call_user_func($module."_info_cron"), $module);
		if(function_exists($module."_info_menu")) $this->installMenu(call_user_func($module."_info_menu"), $module);
		if(function_exists($module."_info_menu_items")) $this->installMenuItems(call_user_func($module."_info_menu_items"), $module);
		if(function_exists($module."_info_panels")) $this->installPanels(call_user_func($module."_info_panels"), $module);
		if(function_exists($module."_info_system_uri")) $this->installSystemUri(call_user_func($module."_info_system_uri"), $module);
		if(function_exists($module."_info_system_variables")) $this->installSystemVariables(call_user_func($module."_info_system_variables"));
		if(function_exists($module."_info_user_access")) $this->installUserAccess(call_user_func($module."_info_user_access"), $module);
				
		//add module to installed list
		$this->setModuleInstalled($module);

		//add module to enabled list
		$this->setModuleEnabled($module);

		//update version of module
		$this->setModuleVersion($module, $meta['version']);

		$this->agave->invoke('module_install', $module);

		$this->agave->log('module', "Installed module $module");
	}

	public function uninstallModule($module) {
		include_once($this->agave->modulePath($module).$module.".info");
		$meta = call_user_func($module."_info_meta");

		//remove core data
		$this->uninstallCron($module);
		$this->uninstallMenu($module);
		$this->uninstallMenuItems($module);
		$this->uninstallPanels($module);
		$this->uninstallSystemUri($module);
		if(function_exists($module."_info_system_variables")) $this->uninstallSystemVariables(call_user_func($module."_info_system_variables"));
		$this->uninstallUserAccess($module);

		//remove cache items from db
		$this->clearModuleCache($module);

		//call uninstall hook for module
		if(function_exists($module."_info_uninstall")) call_user_func($module."_info_uninstall");

		//remove module from installed_modules and enabled_modules setting
		$this->setModuleUninstalled($module);
		$this->setModuleDisabled($module);
		
		$this->agave->log('module', "Uninstalled module $module");
	}

	public function enableModule($module) {
		include_once($this->agave->modulePath($module).$module.".info");
		$meta = call_user_func($module."_info_meta");

		$this->setModuleEnabled($module);

		$this->agave->log('module', "Enabled module $module");
	}
	
	public function disableModule($module) {
		include_once($this->agave->modulePath($module).$module.".info");
		$meta = call_user_func($module."_info_meta");

		$this->setModuleDisabled($module);

		$this->agave->log('module', "Disabled module $module");
	}

	public function updateModule($module) {
        //NOTE: updating a module right now will ignore system_variables and user_access

		//get meta info
		include_once($this->agave->modulePath($module).$module.".info");
		$meta = call_user_func($module."_info_meta");

		//get version info for module
		$versions = $this->agave->setting('module_versions');
        $oldVersion = $versions[$module];
        $newVersion = $meta['version'];

        //special sql done here - as of now configurations are dropped and re-added; this is a pain and should change at some point
		call_user_func_array($module."_info_update", array());

        //remove items from .info file
		$this->uninstallCron($module);
		$this->uninstallMenu($module);
		$this->uninstallMenuItems($module);
		$this->uninstallPanels($module);
		$this->uninstallSystemUri($module);

		//remove cache items from db
		$this->clearModuleCache($module);

        //install items from .info file
		if(function_exists($module."_info_cron")) $this->installCron(call_user_func($module."_info_cron"), $module);
		if(function_exists($module."_info_menu")) $this->installMenu(call_user_func($module."_info_menu"), $module);
		if(function_exists($module."_info_menu_items")) $this->installMenuItems(call_user_func($module."_info_menu_items"), $module);
		if(function_exists($module."_info_panels")) $this->installPanels(call_user_func($module."_info_panels"), $module);
		if(function_exists($module."_info_system_uri")) $this->installSystemUri(call_user_func($module."_info_system_uri"), $module);

		//save version info for module
		$this->setModuleVersion($module, $newVersion);
        //let user know that module may need to be reconfigured
        $this->agave->message('warning', "Module <b>$module</b> has been updated, it may need to be reconfigured for your site to work properly.");

		$this->agave->log('module', "Updated module $module from version $oldVersion to $newVersion");
	}

/**
 * Core table bulk install/uninstalls
 */

	public function installCron($jobs, $module) {
		foreach($jobs as $job) {
			$name = $job[0];
			$desc = $job[1];
			$func = $job[2];
			$interval = $job[3];
			$enabled = $job[4];
			
			$this->addCron($name, $desc, $func, $interval, $module, $enabled);
		}
	}
	
	public function uninstallCron($module) {
		$query = "DELETE FROM `agave_cron` WHERE `module`='$module'";
		$this->agave->doSQLQuery($query, 0);
	}
	
	public function installMenu($menus, $module) {
		foreach($menus as $menu) {
			$name = $menu[0];
			$desc = $menu[1];
		
			$this->addMenu($name, $desc, $module);
		}
	}
	
	public function uninstallMenu($module) {
		$query = "DELETE FROM `agave_menu` WHERE `module`='$module'";
		$this->agave->doSQLQuery($query, 0);		
	}
	
	public function installMenuItems($items, $module) {
		foreach($items as $item) {
			$menu = $item[0];
			$path = $item[1];
			$weight = $item[2];
			$desc = $item[3];
			$href = $item[4];
			$visible = $item[5];
			$expanded = $item[6];
			$access = $item[7];
			$this->addMenuItem($menu, $path, $weight, $desc, $href, $visible, $expanded, $access, $module);
		}
	}
	
	public function uninstallMenuItems($module) {
		$query = "SELECT `menuKey`,`array` FROM `agave_menu`";
		$menus = $this->agave->doSQLQuery($query, 3);
		foreach($menus as $menu){
			$menu['array']=unserialize($menu['array']);
			$this->deleteModuleFromMenuArray($menu['array'], $module);
			$menu['array']=serialize($menu['array']);
			$query = "UPDATE `agave_menu` SET `array`='".$menu['array']."' WHERE `menuKey`='".$menu['menuKey']."'";
			$this->agave->doSQLQuery($query, 0);
		}
	}
	
	private function deleteModuleFromMenuArray(&$arr, $module) {
		foreach($arr as $key=>$value){
			if(!$this->isProp($key)){
				if($value['^module'] == $module){
					unset($arr[$key]);
				}
				else{
					$this->deleteModuleFromMenuArray($value, $module);
				}
			}
		}
	}
	
	private function isProp($key){
		if(!(strpos($key,"^")===FALSE)) {
			return true;
		}
		else {
			return false;
		}
	} 
	
	public function installPanels($panels, $module) {
		foreach($panels as $panel) {
			$name = $panel[0];
			$title = $panel[1];
			$content = $panel[2];
			$query = $panel[3];
			$template = $panel[4];
			$func = $panel[5];
			$region = $panel[6];
			$include = $panel[7];
			$exclude = $panel[8];
			$access = $panel[9];
			$weight = $panel[10];
			$enabled = $panel[11];
			
			$this->addPanel($name, $title, $content, $query, $template, $func, $region, $include, $exclude, $access, $weight, $enabled, $module);
		}
	}
	
	public function uninstallPanels($module) {
		$query = "DELETE FROM `agave_panels` WHERE `module`='$module'";
		$this->agave->doSQLQuery($query, 0);	
	}
	
	public function installSystemUri($uris, $module) {
		foreach($uris as $uri) {
			$dest = $uri[0];
			$alias = $uri[1];
			$access = $uri[2];
			$function = $uri[3];
			$file = $uri[4];
			$panels = $uri[5];
			$route = $uri[6];
			$this->addSystemUri($dest, $alias, $access, $module, $function, $file, $panels, $route);
		}
	}
	
	public function uninstallSystemUri($module) {
		$query = "DELETE FROM `agave_system_uri` WHERE `module`='$module'";
		$this->agave->doSQLQuery($query, 0);
	}
	
	public function installSystemVariables($settings) {
		foreach($settings as $setting) {
			$key = $setting[0];
			$value = $setting[1];
			$this->saveSetting($key, $value);
		}
	}
	
	public function uninstallSystemVariables($vars) {
		foreach($vars as $key=>$value) {
			$this->saveSetting($key); //saving a setting w/ no value will remove it
		}
	}
	
	public function installUserAccess($args, $module) {
		foreach($args as $arg) {
			$action = $arg[0];
			$label = $arg[1];
			$desc = $arg[2];
			$default = $arg[3];
			$this->addAccessArgument($action, $label, $desc, $default, $module);
		}
	}

	public function uninstallUserAccess($module) {
		$query = "SELECT `action` FROM `agave_users_access` WHERE `module`='$module'";
		$args = $this->agave->doSQLQuery($query, 1);
		if($args) foreach($args as $arg) $this->removeAccessArgument($arg);
	}

/**
 * Core table manipulators
 */

	public function clearModuleCache($module) {
		$query = "DELETE FROM `agave_cache` WHERE `module`='$module'";
		$this->agave->doSQLQuery($query, 0);
	}
	
	public function addCron($name=NULL, $desc=NULL, $func=NULL, $interval=NULL, $module=NULL, $enabled=0) {
		$query = "INSERT INTO `agave_cron` (`name`,`description`,`module`,`function`,`interval`,`enabled`)
					VALUES('".$name."', '".$desc."', '".$module."', '".$func."', $interval, $enabled)";
		$this->agave->doSQLQuery($query, 0);
	}
	
	public function addMenu($name=NULL, $desc=NULL, $module=NULL) {
		$query = "INSERT INTO `agave_menu` (`name`,`desc`,`module`,`array`)
					VALUES('".$name."', '".$desc."', '".$module."' , '".serialize(array())."')";
		$this->agave->doSQLQuery($query, 0);
	}
	
	public function addMenuItem($menu=NULL, $path=NULL, $weight=NULL, $desc=NULL, $href=NULL, $visible=1, $expanded=1, $access=NULL, $module=NULL) {
		$query = "SELECT `array` FROM `agave_menu` WHERE `name`='$menu'";
		$arr = $this->agave->doSQLQuery($query, 0);
		$arr = unserialize($arr);
		global $agave;
		
		$patharr = explode("/",$path);
		array_shift($patharr);
		$arrplace = &$arr;
		foreach($patharr as $entry) {
			$arrplace = &$arrplace[$entry];
		}
		$arrplace['^weight'] = $weight;
		$arrplace['^desc'] = $desc;
		$arrplace['^href'] = $href;
		$arrplace['^visible'] = $visible;
		$arrplace['^expanded'] = $expanded;
		$arrplace['^access'] = $access;
		$arrplace['^module'] = $module;
		
		$arr = serialize($arr);
		$query = "UPDATE `agave_menu` SET `array`='".$arr."' WHERE `name`='".$menu."'";
		$this->agave->doSQLQuery($query, 0);
	}
	
	public function addPanel($name, $title, $content, $query, $template, $func, $region, $include, $exclude, $access, $weight, $enabled, $module) {
		$query = "INSERT INTO `agave_panels` (`name`,`title`,`content`,`query`,`template`,`func`,`region`,`include`,`exclude`,`access`,`weight`,`enabled`,`module`)
					VALUES('$name', '$title', '".$this->agave->escape($content)."', '".$this->agave->escape($query)."', '$template', '$func', '$region', '$include', '$exclude', '$access', '$weight', '$enabled', '$module')";
		$this->agave->doSQLQuery($query, 0);
	}
	
	public function addSystemUri($dest=NULL, $alias=NULL, $access=NULL, $module=NULL, $function=NULL, $file=NULL, $panels=1, $route=0) {
		$query = "INSERT INTO `agave_system_uri` (`dest`,`alias`,`access`,`module`,`function`,`file`,`panels`,`fast_route`)
					VALUES('".$dest."', '".$alias."', '".$access."', '".$module."', '".$function."', '".$file."', '".$panels."', $route)";
		$this->agave->doSQLQuery($query, 0);
	}

	public function saveSetting($key, $value) {
		$this->agave->settings[$key] = $value;
		if($value) {
			if($value=="0" || $value=="no") $value = FALSE;
			if($value=="1" || $value=="yes") $value = TRUE;
			$value = $this->agave->escape(serialize($value));
			$key = $this->agave->escape($key);
			$previous = $this->agave->doSQLQuery("SELECT * FROM `agave_system_variables` WHERE `key`='$key'", 0);
			$query = ($previous) ? "UPDATE `agave_system_variables` SET `value`='".$value."' WHERE `key`='$key'" : "INSERT INTO `agave_system_variables` (`key`, `value`) VALUES(\"".$key."\",\"".$value."\")";
                        $this->agave->doSQLQuery($query);
		}
		else {
			//TODO: Why is this here?
			$query = "DELETE FROM `agave_system_variables` WHERE `key`='$key'";
			$this->agave->doSQLQuery($query);
		}
	}

	public function addAccessArgument($action, $label, $desc, $default, $module) {
		$query = "SELECT `action` FROM `agave_users_access`";
		$current = $this->agave->doSQLQuery($query, 1);
                if(!$current) $current = array(); // attempting fix
		if(in_array($action, $current)) {
			$this->agave->message('error', "An access argument by that name already exists in the database.");
			$this->agave->redirect(TRUE);
		}
		
		//add new access property
		$query = "INSERT INTO `agave_users_access` (`aKey`,`action`,`label`,`desc`,`default`,`module`) VALUES(NULL,'".$action."','".$label."','".$desc."','".$default."','".$module."')";
		$this->agave->doSQLQuery($query);
		
		//add default mappings to all user_types
		$query = "SELECT `name` FROM `agave_users_types`";
		$user_types = $this->agave->doSQLQuery($query, 1);
		if($user_types) {
			foreach($user_types as $level) {
				$query = "INSERT INTO `agave_users_access_map` (`mKey`,`action`, `user_type`, `value`) VALUES(NULL,'".$action."','".$level."','".$default."')";
				$this->agave->doSQLQuery($query);
			}
		}
	}

	public function removeAccessArgument($argument) {
		$query = "DELETE FROM `agave_users_access_map` WHERE `action`='$argument'";
		$this->agave->doSQLQuery($query);
		$query = "DELETE FROM `agave_users_access` WHERE `action`='$argument'";
		$this->agave->doSQLQuery($query);
	}

}