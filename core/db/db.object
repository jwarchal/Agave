<?php
class db {
	//TODO: allow for multiple connections and changing of query target databases
	private $connections = array();
	private $db_info = array();
	
	public function __construct() {}
	public function __destruct() {}

	/*
	 * Connection management methods
	 */
	public function disconnect($name=FALSE) {
		if($name) $this->connections[$name] = NULL;
		else $this->connections = NULL;
	}

	public function connect($db_info) {
		$this->db_info = $db_info;

		foreach($this->db_info as $name=>$data) {
			$this->connections[$name] = FALSE;
		}

		$response = $this->setDatabase('default');
		if(is_object($response)) die($response->getMessage());
	}

	public function setDatabase($db) {
		//NOTE that setting the database to a DB that doesn't exist will fall back to the default DB connection for queries
		if(is_object($this->connections[$db])) {
			$this->dbh = $this->connections[$db];
			return TRUE;
		}
		$e = $this->initializeConnection($db);
		if(!is_object($e)) {
			$this->dbh = $this->connections[$db];
			return TRUE;
		}
		else {
			if(is_object($this->connections['default'])) $this->dbh = $this->connections['default'];
			return $e;
		}
	}

	private function initializeConnection($name) {
		$username = $this->db_info[$name]["username"];
		$password = $this->db_info[$name]["password"];
		$databasename = $this->db_info[$name]["database"];
		$hostname = $this->db_info[$name]["host"];
		$port = $this->db_info[$name]["port"];
		$driver = $this->db_info[$name]["driver"];
		$options = isset($this->db_info[$name]['options']) ? $this->db_info[$name]['options'] : array();

		try {
			$this->connections[$name] = new PDO($driver.':host='.$hostname.';port='.$port.';dbname='.$databasename, $username, $password, $options);
			$this->connections[$name]->query("SET NAMES 'utf8'");
		}
		catch (PDOException $e) {
			return $e;
		}

		return TRUE;
	}

	/*
	 * Query backwards compatibility with old db object
	 */
	function doSQLQuery($queryText,$dataFormat=null,$debug=null) { // TODO: check PDOStatement::errorInfo for errors and put them out somewhere useful...

		if(!$this->dbh){
			die("Error:  Database query attempted without established database connection.");
        }
		//clean up whitespace
		$queryText = preg_replace("/^\s+(\w+\W*\w*)/" , "$1", $queryText );
		//ensure correct encoding
		$this->dbh->query("SET NAMES 'utf8'");
		try {
			$pdostate = $this->dbh->query($queryText);
			if(!$pdostate){
				$error = $this->dbh->errorInfo();
				die("Error:  Unsuccessful execution of a database query.<br/><br/>Query attempted: ".$queryText."<br/>SQLSTATE: ".$error[0]."<br/>Error Code: ".$error[1]."<br/>Error Message: ".$error[2]);
			}
			if ($dataFormat == 0) { // return a scalar value
					return $pdostate->fetchColumn();
			}
			if ($dataFormat == 1) { // return an array of values-- can be used with `list()`
					$col = $pdostate->fetchColumn();
					$arr = array();
					while($col){
						$arr[] = $col;
						$col = $pdostate->fetchColumn();
					}
					return $arr;
			}
			if ($dataFormat == 2) { // return a hash of values
					$retval = $pdostate->fetch();
					if($retval) foreach($retval as $key=>$val){
						if(is_numeric($key)){
							unset($retval[$key]);
						}
					}
					return $retval;
			}
			if (!isset($dataFormat) || $dataFormat == 3) { // return an array of hashes (default format)
					$row = $pdostate->fetch();
					$arr = array();
					while($row) {
						foreach($row as $key=>$val){
							if(is_numeric($key)){
								unset($row[$key]);
							}
						}
						$arr[] = $row;
						$row = $pdostate->fetch();
					}
					return $arr;
			}
		}
		catch (PDOException $e) {
			die("Error in database query execution: ".$e->getMessage()." <br/>");
		}
	}

	//TODO: how do we abstract this for other DB drivers??
	public function mergeRow($table, $data) {
		$fields = array();
		$values = array();
		$duplicates = array();

		foreach($data as $field=>$value) {
			$value = $this->compress($value);
			$fields[] = $field;
			$values[] = $value;
			$duplicates[] = "`".$field."`=VALUES(`".$field."`)";
		}

		$fields = implode("`, `", $fields);
		$values = implode("', '", $values);
		$duplicates = implode(", ", $duplicates);

		$query = "INSERT INTO `".$table."` (`".$fields."`) VALUES('".$values."') ON DUPLICATE KEY UPDATE ".$duplicates;
		$this->doSQLQuery($query, 0);

		return $this->lastInsertId();
	}

	public function lastInsertId() {
		//TODO: start here - lastInsertId seems to not work

		if(!$this->dbh){
			die("Error:  No established database connection to get last insert id from.");
		}

		return $this->dbh->lastInsertId();
	}

	/*
	 * DB value sanitization methods
	 */
	public function escape($string) {
		if(!$this->dbh){
			die("Error:  No established database connection to escape string with.");
		}

		$quoted = $this->dbh->quote($string);
		return substr($quoted, 1, -1);
	}

	public function compress($data) {
		if(is_string($data)) return $this->escape($data);
		if(is_object($data)) return $this->escape(serialize($data));
		if(is_array($data)) return $this->escape(serialize($data));
		return $data;
	}

	/*
	 * PDO wrapper methods
	 */
	//TODO: implement all wrapper methods for PDO

}