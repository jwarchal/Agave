<?php
class agave extends olddb {
	
	//TODO: organize properties by what is set during bootstrap, and what is set internally
	public $destination = FALSE;
	public $current_location = FALSE;
	public $saveInfo = FALSE; //saveInfo and metaInfo should hopefully become deprecated w/ fieldManager
	public $metaInfo = FALSE;
	public $uri = FALSE;
	public $module_env = array();
	private $caches = FALSE;
	public $actionsLoaded = FALSE;
	private $modulesLoaded = FALSE;
	public $debug = FALSE;
	public $settings = FALSE;
	public $cache = TRUE; //set to false before loading other objects to force them to update their caches
	public $installed = TRUE;
	public $user = FALSE;

	public function __construct() {	}
	
	public function modulePath($module) {
		return $this->settings['module_data'][$module]['path'];
	}

	public function cache($item, $data=FALSE, $module=FALSE, $expires=0) {
		if(!$data) return $this->getCache($item);
		else $this->setCache($item, $data, $module, $expires);
	}
		
	private function getCache($item) {
		if(!$this->cache) return FALSE;
		if(isset($this->caches[$item])) return $this->caches[$item];
		else {
			$query = "SELECT `data`,`expires` FROM `agave_cache` WHERE `item`='$item'";
			$cache = $this->doSQLQuery($query, 2);
			if(!$cache) $this->caches[$item] = FALSE;
			else $this->caches[$item] = ($cache['expires'] != 0 && (time() > $cache['expires'])) ? FALSE : unserialize($cache['data']);
			return $this->caches[$item];
		}
	}
	
	private function setCache($item, $data, $module, $expires=0) {
		if($this->installed) {  
			$time = time();
			$data = mysql_real_escape_string(serialize($data));
			$query = "DELETE FROM `agave_cache` WHERE `item`='$item'";
			$this->doSQLQuery($query, 0);
			
			$query = "INSERT INTO `agave_cache` (`item`,`data`,`created`,`expires`, `module`)
						VALUES('$item','".$data."','$time','$expires','$module')";
			$this->doSQLQuery($query);
		}
	}
	
	public function rebuildCaches($cache=NULL) {
		$this->cache = FALSE;
		$this->loadSettings();
		$this->loadModules();
	}
	
	public function death($input, $return=FALSE) {
		if(!$return) {
			if(is_array($input) || is_object($input)) die("<pre>".print_r($input, TRUE)."</pre>");
			else die(var_dump($input));
		}
		else {
			if(is_array($input) || is_object($input)) return "<pre>".print_r($input, TRUE)."</pre>";
			else return var_dump($input);			
		}
	}
	
	public function setting($key, $value=NULL, $save=FALSE) {
		if(!$value) return isset($this->settings[$key]) ? $this->settings[$key] : NULL;
		else if(!$save) $this->settings[$key] = $value;
		else if($save) {
			//... load admin module to save setting?
		}
	}
	
	public function message($type=null, $message=NULL) {
		if($message) $_SESSION['messages'][$type][] = $message;
	}
	
	public function getMessages() {
		//TODO: completely redo - organize by type; unpack user messages IF ENABLED here as well
		$html = NULL;
		if(isset($_SESSION['messages'])) {
			foreach($_SESSION['messages'] as $type=>$messages) {
				$html .= "<ul id='agave-messages-$type' class='agave-messages'>";
				foreach($messages as $message) {
					$html .= "<li>".t($message)."</li>\n";
				}
				$html .= "</ul>";
			}
			unset($_SESSION['messages']);
			return($html);
		}
		return FALSE;
	}

	public function redirect($path=NULL) {
		//if($path==TRUE) $path=$this->current_location;
		if(isset($path)) $path = $this->url.$path;
		else {
			$url = explode("?", $this->url); //get rid of blank ?dest=
			$path = $url[0];
		}
		$this->cleanup();
		header("Location: ".$path);
		exit;
	}

	public function debug($message, $function=null, $arguments=null, $line=NULL, $file=NULL, $filter=NULL) {
		/*
		 * $args = func_get_args();
		 * $agave->debug($message, __METHOD__, $args, __LINE__, __FILE__, $this->debugFilter);
		 * or
		 * $agave->debug($message, __METHOD__);
		 * */
		if ($this->setting('debug')) {
			$item = array();
			$item['message'] = $message;
			$item['function'] = $function;
			$item['args'] = $arguments;
			$item['file'] = $file;
			$item['line'] = $line;
			$_SESSION['debug'][] = $item;
			//TODO: organize by URL
 		}
	}

	public function getDebug() {
		//TODO: organize by URL
		if($this->setting('debug')) {
			$categories = array();
			$filter = ($this->setting('debug-filter')) ? explode(",", $this->setting('debug-filter')) : NULL;
			if(isset($_SESSION['debug'])) {
				foreach($_SESSION['debug'] as $item) {
					//check for filter
					$process = TRUE;
					if($this->setting('debug-filter') && !in_array($item['function'], $filter)) $process = FALSE;
					$func = explode("::", $item['function']);
					if(!isset($func[1])) $item['function'] = $func[0];
					else {
						$item['class'] = $func[0];
						$item['function'] = $func[1];
					}
					if(isset($item['filter']) && !in_array($item['function'], $item['filter'])) $process = FALSE;
									
					//organize by class, then by function
					if($process) {
						$item['class'] = (isset($item['class'])) ? $item['class']." Object" : "Request File";
						$item['args'] = $this->processDebugArgs($item['args']);
						if(!isset($categories[$item['class']][$item['function']])) $categories[$item['class']][$item['function']] = array();
						$categories[$item['class']][$item['function']][] = $item;
					}
				}
				$t = $this->load('themer');
				$themevars['categories'] = $categories;				
				unset($_SESSION['debug']);
				return $t->theme("admin","debug", $themevars);
			}
		}
		
		else return NULL;
	}
	
	private function processDebugArgs($args) {
		$new = array();
		foreach($args as $arg) {
			if($arg==NULL) $arg = "<em>NULL</em>";
			if(is_array($arg)) $arg = var_export($arg, TRUE);
			if(is_object($arg)) $arg = "PHP OBJECT (".get_class($arg).")";
			$new[] = $arg;
		}
		return $new;
	}

	public function log($type, $event, $userKey=NULL) {
		//TODO: add current path field to track errors by url
		$type = mysql_real_escape_string($type);
		$event = mysql_real_escape_string($event);
		if(!isset($_SESSION['logs'])) $_SESSION['logs'] = array();
		$item = array();
		$item['type'] = $type;
		$item['event'] = $event; 
		$item['time'] = time();
		$item['userKey'] = $userKey;
		$item['location'] = $this->current_location;
		$_SESSION['logs'][] = $item;
	}
	
	public function writeLogs() {
		if($this->user) {
			if(isset($_SESSION['logs'])) {
				if(!$this->user->isAnon) { //TODO: we're not logging anything for anonymous users right now, continue this??
					$events = array();
					foreach($_SESSION['logs'] as $item) {
						if(!isset($item['userKey'])) $item['userKey'] = $this->user->userKey;
						$events[] = "('".$item['type']."','".$item['event']."','".$item['time']."','".$item['userKey']."','".$item['location']."')";
					}
					$values = implode(", ", $events);
					$query = "INSERT INTO `agave_logs` (`type`,`event`,`time`,`userKey`,`location`) VALUES $values";
					$this->doSQLQuery($query);
				}
				unset($_SESSION['logs']);
			}
		}
	}
	
	public function registerARGV($vars=null){
		$this->ARGV = array();
		$valueList = array();
		if($vars) {
			foreach($vars as $var) {
				$value = null;
				$value = (!empty($_GET[$var])) ? $_GET[$var] : null;
				if (!$value) $value = (!empty($_POST[$var])) ? $_POST[$var] : null;
				array_push($valueList, $value);
			}//foreach ($vars as $var)
		}
		$this->ARGV = array_combine($vars, $valueList);
		return $this->ARGV;
	}
	
	public function loadModules() {
		if($this->module_env = $this->cache('agave_module_env')) $this->modulesLoaded = TRUE;
		else {
			foreach($this->setting('enabled_modules') as $module) {
				$modulePath = $this->modulePath($module);
				$file = $modulePath.$module.".info";
				if(file_exists($file)) {
					include_once($file);
					$extensions = (function_exists($module."_info_extensions")) ? call_user_func($module."_info_extensions") : FALSE;
					$objects = (function_exists($module."_info_objects")) ? call_user_func($module."_info_objects") : FALSE;
					$event_listeners = (function_exists($module."_info_event_listeners")) ? call_user_func($module."_info_event_listeners") : FALSE;

					if($extensions) foreach($extensions as $extension) {
						//TODO: Change this, include each file, add $extensions together, 1 foreach after all included
						$data['file'] = $modulePath.$extension['location'];
						$data['data'] = $extension['data'];
						$this->module_env['extensions'][$extension['module']][$extension['type']][] = $data;
						unset($data); 
					}
					if($objects) foreach($objects as $object=>$location) $this->module_env['objects'][$object] = $modulePath.$location;
					if($event_listeners) foreach($event_listeners as $listener) {
						$listener['module'] = $module;
						$listener['file'] = $modulePath.$listener['location'];
						$listener['settings'] = $this->setting('event_listener_'.$module.'_'.$listener['name']);
						$this->module_env['events'][$listener['event']][] = $listener;
					}
				}
			}

			$this->cache('agave_module_env', $this->module_env, 'admin');
			$this->modulesLoaded = TRUE;
		}
	}

	public function getExtensions($module) {
		return (isset($this->module_env['extensions'][$module])) ? $this->module_env['extensions'][$module] : FALSE;
	}

	public function getObjectFile($object) {
		return (isset($this->module_env['objects'][$object])) ? $this->module_env['objects'][$object] : FALSE;
	}
		
	public function invoke($action, &$data=null) {
		//TODO: change invoke to "event", have it look up event, and pass along data to "eventListeners"
		//if actions have been loaded, call functions that correspond to the invoked action
		static $i = 1;
		//echo "$i - $action<br />";
		if($this->actionsLoaded) {
			if(isset($this->actions[$action])) {
				foreach($this->actions[$action] as $func) {
					if(function_exists($func)) $data = call_user_func_array($func, array($data));
					else {
						//TODO: implement file loading on actions
						//include_once(necessary file)
						//$data = call_user_func_array($func, $array($data));
					}
				}
			}
		}
		$i++;
		return $data;
	}
	
	public function inc($module, $file) {
		$file = $this->modulePath($module).$file;
		include_once($file);
	}
	
	public function load($object, $local=FALSE) {
		//look for already existing objects first, and return if found
		if(isset($GLOBALS['objects'][$object]) && !$local) return $GLOBALS['objects'][$object];
		if(class_exists($object) && $local==TRUE) return new $object;
		
		//include object file if it hasn't been included yet
		// - first look in site for module, if it's not there, look in global space
		else {
			//return local dependency, or global - instantiate it if it's not there
			if($local) return new $object;
			else {
				$GLOBALS['objects'][$object] = new $object;
				return $GLOBALS['objects'][$object];
			}
		}
	}
	
	//TODO: optimize this, make sure it's handling caching correctly, right now settings.php changes aren't active until cache is refreshed
	public function loadSettings() {
		if($this->settings = $this->cache('agave_settings')) $this->settingsLoaded = TRUE; //TODO: what a terrible way to write this...
		else {
			global $settings;
			$this->settings = $settings;
			$query = "SELECT * FROM `agave_system_variables`";
			$sqlData = $this->doSQLQuery($query, 3);
			if ($sqlData) {
				foreach ($sqlData as $row) {
					//all settings can be overridden in code from your sites settings.php			
					if(!isset($this->settings[$row['key']])) $this->settings[$row['key']] = unserialize($row['value']);
				}
				unset($sqlData);
				$this->cache('agave_settings', $this->settings, 'admin');
				$this->settingsLoaded=TRUE;
			}
		}
	}
	
	public function encrypt($input) {
		if (isset($this->settings['SALT'])) return trim(strtr(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $this->settings['SALT'], $input, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB), MCRYPT_RAND))),'+/=', '-_~'));
		else return strtr(base64_encode($input), '+/=', '-_~');  
	}
	
	public function decrypt($input) {
		if(isset($this->settings['SALT'])) return trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $this->settings['SALT'], base64_decode(strtr($input, '-_~', '+/=')), MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB), MCRYPT_RAND)));
		else return base64_decode(strtr($input, '-_~', '+/='));
	}

	public function stop($content=null) {
		$this->cleanup();
		exit($content);
	}
	
	public function cleanup() {
		//TODO: write user messages
		$this->writeLogs();
		if($this->user) session_write_close();
	}
}