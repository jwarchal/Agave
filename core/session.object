<?php
class session {

	//TODO: add generateOneTimeKey - will add entry in DB
	//TODO: add authenticateOneTimeKey($key) - will remove key from DB

	public function __construct() {		
		$open = array(&$this, "open");
		$close = array(&$this, "close");
		$read = array(&$this, "read");
		$write = array(&$this, "write");
		$destroy = array(&$this, "destroy");
		$gc = array(&$this, "cleanup");
		session_set_save_handler($open, $close, $read, $write, $destroy, $gc);
		register_shutdown_function('session_write_close');
		
		//set session method, file or database
		global $agave;
		$method = $agave->setting('sess_method');
		$this->method = (isset($method)) ? $agave->setting('sess_method') : 'file';
	}
	
	public function __destruct() { session_write_close(); }

	public function start($save_path=NULL, $session_name=NULL) {
		global $agave;
		
		//set important session variables here in start function
		if(!$save_path) $save_path = ($agave->setting('sess_save_path')) ? $agave->setting('sess_save_path') : "/tmp";
		session_save_path($save_path);
		if(!$session_name) $session_name = "agave_auth_".md5($agave->url);
		session_name($session_name);
		$sess_maxtimeout = ($agave->setting('sess_max_timeout')) ? $agave->setting('sess_max_timeout') : "43200";
		ini_set('session.gc_maxlifetime', $sess_maxtimeout); 
		
		session_start();
	}

	public function open($save_path, $session_name) {
		$this->save_path = $save_path;
		$this->session_name = $session_name;
		return TRUE;
	}

	public function close() {
		//TODO: do I need to do something else here?
		return TRUE;
	}
	
	//read is what used to be the authenticate function (it is called automatically when "start" is called)
	public function read($id) {
		global $agave;
		$agave->user = new user; //agave user is created when the session is read
		
		//look for session in DB to determine whether or not user is logged in
		if(!isset($_COOKIE[session_name()])) $_COOKIE[session_name()] = "NULL";
			$query = "SELECT * FROM `agave_users_sessions` WHERE `sessionID` = '".$_COOKIE[session_name()]."' ";
			$sqlData = $agave->doSQLQuery($query, 2);
			$userKey = $sqlData['userKey'];
			
		if (!$userKey) {
			//if a session file exists, return it, otherwise return empty string
			$this->method = 'file';
			$agave->user->createAnonymousUser();
			$file = $this->save_path."/sess_".$id;

			$data = (file_exists($file)) ? (string) @file_get_contents($file) : '';
			return $data;
		}
		else {
			$sessionData = unserialize($sqlData['data']);
			$agave->user->build($userKey);
			$agave->user->buildMappings();
			$agave->user->sessionID = $sqlData['sessionID'];
						
			return $sessionData;
		}
	}
	
	public function write($sess_id, $data) {
		global $agave;
		if($agave->user->isAnon || $agave->this->method=='file') {
			$file = "$this->save_path/sess_$sess_id";
			if($fp = @fopen($file, "w")) {
				$return = fwrite($fp, $data);
				fclose($fp);
				
				if(!$agave->user->isAnon) {
					$query = "UPDATE `agave_users_sessions` SET `time_refreshed`='".time()."' WHERE `sessionID`='".$sess_id."'";
					$agave->doSQLQuery($query);	
				}
				
				return $return;
			}
			 else return FALSE;
		}
		else {
			$query = "UPDATE `agave_users_sessions` SET `time_refreshed`='".time()."', `data`='".$agave->escape(serialize($data))."' WHERE `sessionID`='".$sess_id."'";
			$agave->doSQLQuery($query);
			return TRUE;
		}
	}
	
	public function destroy($id=NULL) {
		$id = ($id) ? $id : $_COOKIE[session_name()];
		global $agave;
		if(!$agave->user->isAnon && $this->method=='database') {
			$query = "DELETE FROM `agave_users_sessions` WHERE `sessionID`='".$agave->escape($id)."'";
			$agave->doSQLQuery($query);
		}
		else {
			$file = "$this->save_path/sess_$id";
			if(file_exists($file)) @unlink($file);
		}
	}

	public function end() {
		session_destroy();
		session_unset();
	}
	
	public function cleanup($sess_maxlifetime) {
		global $agave;
		//clean files
		foreach (glob($this->save_path."/sess_*") as $file) {
			if (filemtime($file) + $sess_maxlifetime < time()) {
				@unlink($file);
			}
		}
		
		//clean database
		$query = "SELECT `time_refreshed`,`sessionID` FROM `agave_users_sessions`";
		$sessions = $agave->doSQLQuery($query, 3);
		$old = array();
		foreach($sessions as $session) {
			if($session['time_refreshed'] + $sess_maxlifetime < time()) $old[] = $session['sessionID'];
		}
		$old = implode(',', $old);
		$query = "DELETE FROM `agave_users_sessions` WHERE `sessionID` IN('".$old."')";
		$agave->doSQLQuery($query);
		
		return true;
	}
	
	public function getUserKey($login,$password){
		global $agave;
		$query = "SELECT `userKey` " .
		                  "FROM `agave_users` " .
		                  "WHERE `login` = '$login' " .
		                  "AND `password` = '$password' " ;
		$sqlData = $agave->doSQLQuery($query,0);
		return $sqlData;
	}
	
	public function returnValidSessionID(){
		global $agave;
		session_regenerate_id();
		$query = "SELECT `sessionID` FROM `agave_users_sessions` WHERE `sessionID` = '".session_id()."' ";
		$sqlData = $agave->doSQLQuery($query, 0);
		if ($sqlData){
			session_regenerate_id();
			$this->returnValidSessionID();
		}
		return session_id();
	}
	
	public function addSession($sessionID, $userKey, $data=null){
	    global $agave;
	    $time = time();
	    $data = ($data) ? $agave->escape(serialize($data)) : NULL;
		$query = "INSERT INTO `agave_users_sessions` (`sessionID`,`userKey`,`time_refreshed`,`time_created`,`data`)
					VALUES('$sessionID','$userKey','$time','$time','$data');";
		$agave->doSQLQuery($query,0);
	}
	
	public function userTimeOut() {
		
	}
}